version: "3"
services:
  # Starts zookeeper
  kafka:
    image: 'bitnami/kafka:3.6.0'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,CLIENT://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,CLIENT://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,CLIENT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
    volumes:
      - kafka_data:/bitnami/kafka
    restart: unless-stopped

  # Init script for topics, might be changed
  init-kafka:
    image: 'bitnami/kafka:3.4'
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic article --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic cart --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic order --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic payment --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic shipping --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic stock-changes --replication-factor 1 --partitions 4

      echo 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:29092 --list
      "

  # Starts No-SQL database, used by shopping, checkout, payment and warehouse service
  mongodb:
    image: mongo:6-jammy
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    ports:
      - 27017:27017

  # Starts MQTT broker, used between warehouse and shop infrastructure, events has to be handled and forwarded into Kafka
  mosquitto:
    image: eclipse-mosquitto
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
      - ./iot-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped
    ports:
      - 1883:1883
  
  # Kafka UI
  kui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - 8090:8080
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
    volumes:
      - ./kui/config.yml:/etc/kafkaui/dynamic_config.yaml

  # Mongo UI
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - "8091:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongo://mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: changeme
    depends_on:
      - mongodb

  # Sensor(s) which publishes / subscribes data in MQTT broker
  warehouse-sensor:
    build:
      context: warehouse-sensor-service
    restart: unless-stopped
    environment:
      - MQTT_HOST=mqtt://mosquitto:1883

volumes:
  kafka_data:
  mosquitto_data:
  mosquitto_log:
  mongo_data:
